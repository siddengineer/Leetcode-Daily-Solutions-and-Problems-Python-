3227. Vowels Game in a String(“first-move advantage / simple winning condition” problem.)

Alice and Bob are playing a game on a string.

You are given a string s, Alice and Bob will take turns playing the following game where Alice starts first:

On Alice's turn, she has to remove any non-empty substring from s that contains an odd number of vowels.
On Bob's turn, he has to remove any non-empty substring from s that contains an even number of vowels.
The first player who cannot make a move on their turn loses the game. We assume that both Alice and Bob play optimally.

Return true if Alice wins the game, and false otherwise.

The English vowels are: a, e, i, o, and u.

 

Example 1:

Input: s = "leetcoder"

Output: true

Explanation:
Alice can win the game as follows:

Alice plays first, she can delete the underlined substring in s = "leetcoder" which contains 3 vowels. The resulting string is s = "der".
Bob plays second, he can delete the underlined substring in s = "der" which contains 0 vowels. The resulting string is s = "er".
Alice plays third, she can delete the whole string s = "er" which contains 1 vowel.
Bob plays fourth, since the string is empty, there is no valid play for Bob. So Alice wins the game.
Example 2:

Input: s = "bbcd"

Output: false

Explanation:
Explanation:
There is no valid play for Alice in her first turn, so Alice loses the game.

...bash
Algorithm:

Initialize a set of vowels: vowels = {'a','e','i','o','u'}.

Scan the string:

Iterate through each character c in the string s.

Convert c to lowercase to handle uppercase letters.

Check for Alice's move:

If any character is a vowel, Alice can remove it (odd-numbered vowel substring) and win immediately.

Return True.

No vowels found:

If the loop finishes and no vowel was found, Alice cannot make a move.

Return False.

```
###################code##################################################
```bash
class Solution(object):
    def doesAliceWin(self, s):
        """
        :type s: str
        :rtype: bool
        """
        vowels = {'a','e','i','o','u'}
        for char in s.lower():
            if char in vowels:
                return True  # Alice can remove this vowel and win
        return False  # No vowels, Alice loses
```
'''bash
Time Complexity

O(n), where n = length of string s (we scan each character once).

Space Complexity

O(1), only storing the vowels set.

```
```bash
Example of Similar Problems

Stones Game: Alice and Bob remove stones from a pile. If the first player can take the last stone, they win.

Algorithm: Check if number of stones modulo some value gives first-move advantage.

Odd-Even Removal Game: Remove numbers based on odd/even rules.

Algorithm: Check if any number matches the first player’s removal condition.

Substring or character games (like vowels game):

Algorithm: Scan for the first character that allows a move. If found → first player wins
```




There is no valid play for Alice in her first turn, so Alice loses the game.
