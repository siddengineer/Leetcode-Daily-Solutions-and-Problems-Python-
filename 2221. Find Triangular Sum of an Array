Problem Understanding

You are given an array nums of digits (0â€“9). You need to repeatedly reduce the array by summing consecutive elements modulo 10 until only one element remains. That final element is the triangular sum.

For example:

nums = [1,2,3,4,5]
Step 1: [ (1+2)%10, (2+3)%10, (3+4)%10, (4+5)%10 ] = [3,5,7,9]
Step 2: [ (3+5)%10, (5+7)%10, (7+9)%10 ] = [8,2,6]
Step 3: [ (8+2)%10, (2+6)%10 ] = [0,8]
Step 4: [ (0+8)%10 ] = [8]
Result: 8

Algorithm (Brute Force Approach)

While the array has more than 1 element:

Create a new array of length n-1.

For each i in 0..n-2, set newNums[i] = (nums[i] + nums[i+1]) % 10.

Replace nums with newNums.

Return the only element in nums.

Python Code (Brute Force)
def triangularSum(nums):
    while len(nums) > 1:
        newNums = [(nums[i] + nums[i+1]) % 10 for i in range(len(nums)-1)]
        nums = newNums
    return nums[0]

# Example 1
print(triangularSum([1,2,3,4,5]))  # Output: 8

# Example 2
print(triangularSum([5]))          # Output: 5
